
抽象数据类型
定义在特定数据模型上的一组操作

数据结构
基于某种特定语言，实现adt的一整套算法



--表ADT
定义在表上的操作
 insert, remove, find,,printList,makeEmpty等等
 表可以通过数组来简单实现
 
 --简单的链表
 由一系列节点组成，节点在内存中不必相连，每个节点均含有表元素和到该元素后继节点链（link）.
 双向链表则是包含有到后继和前驱的链
 通过改变链的指向就能进行删除和插入的操作。
 
 --Java Collections API中的表
 Collection接口
 包含大部分基本操作，如 size,add,remove等等
 
 Iterator接口
 该接口的基本思路是，通过iterator方法，每个集合均创建并返回客户一个实现Iterator接口的对象
 并将当前位置的概念在对象内部存储下来。
 
 List接口，ArrayList类和LinkedList类
 
 List接口继承Collection接口，并包含Collection接口的所以方法
 List的ADT有两种流行的实现方式，ArrayList和LinkedList
 
 ArrayList的优点在于get 和set花费常数时间
 但是插入和删除代价很昂贵
 
 LinkedList则提供List ADT的双向链表实现，因此删除和插入花费常数时间，而get的调用则是很昂贵。
 
 栈ADT LIFO表
 
 栈的实现
 	可通过ArrayList,LinkedList 数组等实现
 
 栈的应用
 	平衡符号：编译器检查程序语法错误
 	后缀表达式

队列ADT
队列的基本操作是enqueue(入队)，它是在表的末端（叫做队尾(rear)）插入一个元素
dequeue(出队)，它是删除在表的开头(队头(front))的元素 	
 
 ------------------------------------
 树
 树的遍历以及应用
 UNIX和DOS在内很多操作系统的目录结构
 
 先序遍历
 后序遍历
 
 查找树ADT--二叉查找树 
 
 
 --标准库中的集合与映射
 Set接口代表不允许重复的Collection
 保持各项以有序状态的set实现是TreeSet,TreeSet类的基本操作花费对数最坏情形时间。
 
 Map接口
 代表有关键字以及它们的值组成的一些项的集合。
 SortedMap接口中，映射中的关键字保持逻辑上的有序状态。
 SortedMap接口的一种实现是TreeMap类
 
 
--散列
理想的散列是包含一些项，具有固定大小的数组
通常查找是队项的某个部分进行的，这部分叫做关键字。
每个关键字被映射成一个值，被方到适当的单元中，这个映射就叫散列函数。

当一个元素被插入时与一个已经插入的元素散列到相同的值时，就会产生冲突。
解决冲突最简单的方法有两种：分离链接法和开放定址法。

》》标准库中的散列表
HashSet
HashMap
HashSet中的项必须是想equals和hashCode方法
这两个类通常是使用分离链接法实现的。


----------------------
---优先队列
优先队列是允许至少下列两种操作的结构
insert（插入）
deleteMin（删除最小者） 

--优先队列的实现
	1.可以使用简单链表实现
	2.可以使用二叉查找书实现
 
 二叉堆：一棵被完全填满的二叉树被称为二叉堆，在底层有可能例外，底层上的元素从左到右填入
 
 堆序性质：在堆中，对于每一个节点X，X的父亲中的关键字小于（或等于）X的关键字，根节点除外。
 
 基本的堆操作
 插入：创建一个空穴，如果要插入的元素X可以被插入而不破坏堆序，插入就完成，否则，我们把空穴的父节点上的元素移入该空穴中
 这种策略叫做“上滤”
 
 删除最小元（deleteMin）
 可以通过下滤来删除最小元
 
 标准库中堆优先队列
 PriorityQueue
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 